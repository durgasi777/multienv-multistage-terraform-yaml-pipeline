trigger:
  - none
  
variables:
  - name: PROJECT_PATH
    value: Terraform
  - name: tfComponent
    value: Dev
  - name: tfExecutionDir
    value: '$(PROJECT_PATH)/$(tfComponent)'
  - name: terraformVersion
    value: 0.12.25
  - name: serviceConnectionName
    value: kkazureserviceconn
  - name: backendAzureRmResourceGroupName
    value: rg-terraformstate
  - name: backendAzureRmStorageAccountName
    value: krishterrastatestorage
  - name: backendAzureRmContainerName
    value: terraformdemo
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: tfVarFileName
    value: '$(PROJECT_PATH)/tfvars/dev.tfvars'

pool:
  vmImage: 'ubuntu-latest'
stages:
- stage:
  displayName: 'Terraform Plan'
  jobs:
  - job: TFPlan
    steps:
      - task: Cache@2
        displayName: 'Register TF cache'
        inputs:
          key: terraform | $(Agent.OS) | "$(Build.BuildNumber)" | $(Build.SourceVersion) | $(tfComponent) | "$(tfVarFileName)"
          path: $(tfExecutionDir)- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: '$(terraformVersion)'
      - task: TerraformTaskV1@0
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(tfExecutionDir)'
          backendServiceArm: '$(serviceConnectionName)'
          backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
          backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
          backendAzureRmContainerName: '$(backendAzureRmContainerName)'
          backendAzureRmKey: '$(backendAzureRmKey)'
      - task: TerraformTaskV1@0
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-var-file=$(tfVarFileName) -out=${BUILD_BUILDNUMBER}.tfplan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(tfExecutionDir)'
          environmentServiceNameAzureRM: '$(serviceConnectionName)'
- stage:
  displayName: 'Terraform Apply'
  jobs:
  - deployment: DeployDev
    displayName: 'Terraform Apply'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'terraform'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: Cache@2
            displayName: 'Get Cache for TF Artifact'
            inputs:
              key: terraform | $(Agent.OS) | "$(Build.BuildNumber)" | $(Build.SourceVersion) | $(tfComponent) | "$(tfVarFileName)"
              path: '$(System.DefaultWorkingDirectory)/$(tfExecutionDir)'
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(terraformVersion)'
          - task: TerraformTaskV1@0
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '${BUILD_BUILDNUMBER}.tfplan' # pass plan file to terraform apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(tfExecutionDir)'
              environmentServiceNameAzureRM: '$(serviceConnectionName)'